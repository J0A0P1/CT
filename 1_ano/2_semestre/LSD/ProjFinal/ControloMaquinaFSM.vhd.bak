-- FSM, Controlo de funções da máquina

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.numeric_std.ALL;

entity ProjFinal is
    port ( --entradas do controlador
           reset, clk, start_stop, timer_exp: in std_logic;
           time_cozer, time_levedar, time_amassar, time_repouso: in std_logic_vector(7 downto 0);
			  --saídas do controlador
			  new_time, time_enable: out std_logic;
           display_selec, time_value: out std_logic_vector(7 downto 0);
           LEDG : out std_logic_vector(2 downto 0);
           LEDR : out std_logic
 );
end ProjFinal;



architecture Behavioral of ProjFinal is
    type estado is (inicio, amassar, levedar, cozer, repouso, stop);
    signal estado_atual, proximo_estado: estado;
    signal total_time, display_time : std_logic_vector(7 downto 0);
    signal counter, extra_time : std_logic_vector(7 downto 0) := (others => '0'); --inicia tudo a zero 

	 
	 
begin
    process(clk, reset)
    begin
        if(reset = '1') then
            estado_atual <= inicio;
        elsif(rising_edge(clk)) then
            estado_atual <= proximo_estado;
        end if;
    end process;

    process(estado_atual, time_cozer, time_levedar, time_amassar, start_stop, timer_exp)
    begin
        proximo_estado <= estado_atual; -- evita redundância
		  
        case estado_atual is
            
				when inicio =>
                
					 total_time <= std_logic_vector(unsigned(time_amassar) + unsigned(time_levedar) + unsigned(time_cozer));
                display_time <= total_time;
                if start_stop = '1' then
                    proximo_estado <= amassar;
                end if;

            when amassar =>
                LEDR(0) <= '1'; 		-- LEDR ilumina-se, indicando o inicio do processo
                LEDG <= "001";   	-- Acende "001", correspondendo á fase de amassar a massa.
                counter <= time_amassar;
                display_time <= counter;
                if timer_exp = '1' then
                    proximo_estado <= levedar;
                elsif start_stop = '1' then
                    proximo_estado <= stop;
                end if;

            when levedar =>
                LEDR(0) <= '1';		-- Continua o processo de prdução do pão, mantendo-se o LEDR ligado
					 LEDG <= "010"; 		-- Acende "010", correspondendo á fase de atuação das leveduras
                counter <= time_levedar;
                display_time <= counter;
                if timer_exp = '1' then
                    proximo_estado <= cozer;
                elsif start_stop = '1' then
                    proximo_estado <= stop;
                end if;

            when cozer =>
                LEDR(0) <= '1'; 		-- Continua o processo de prdução do pão, mantendo-se o LEDR ligado
					 LEDG <= "100"; 		-- Acende "100", correspondendo á fase de cozimento 
                counter <= time_cozer;
                display_time <= counter;
                if timer_exp = '1' then
                    proximo_estado <= repouso;
                elsif start_stop = '1' then
                    proximo_estado <= stop;
                end if;

            when repouso =>
                LEDR(0) <= '1'; 		-- Manter o LEDR ligado por 2s, depois do processo de cozimento
					 LEDG <= "111"; 	-- Acende "111", correspondendo ao repouso
                counter <= time_repouso;
                display_time <= counter;
                if timer_exp = '1' then
                    proximo_estado <= inicio;
                elsif start_stop = '1' then
                    proximo_estado <= stop;
                end if;

            when stop =>
					LEDR(0) <= '1'; 		--Continua ligado pois está, apesar de parado, durante o processo de fazer o pão 
               LEDG <= "000";
               counter <= (others => '0');
               display_time <= counter;
               if start_stop = '0' then
                   proximo_estado <= estado_atual;
               end if;
					
                --if stop = '1' then
							--LEDR <= '0';
							--LEDG <= "000";
							--display_time <= counter; --mostra o tempo parado
							--if start_stop = '0' then
								 --proximo_estado <= estado_atual;
								 --counter <= counter + 1;
								 --display_time <= counter;
							--end if;
					 --if stop = '0' then
							--counter <= counter + 1;
							--display_time <= counter;
					--end if;

        end case;
    end process;
end Behavioral;